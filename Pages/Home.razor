@page "/"
@using ASM_NhomSugar_SD19311.DTO
@using ASM_NhomSugar_SD19311.Data
@using ASM_NhomSugar_SD19311.Model
@using Microsoft.EntityFrameworkCore
@inject HttpClient Http
@using static System.Net.WebRequestMethods
@inject CakeShopContext _context
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick-theme.min.css" integrity="sha512-17EgCFERpgZKcm0j0fEq1YCJuyAWdz9KUtv1EjVuaOz8pDnh/0nZxmU6BBXwaaxqoi9PQXnRWqlcDB027hgv9A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.min.css" integrity="sha512-yHknP1/AwR+yx26cB1y0cjvQUMvEa2PFzt1c9LlS4pRQ5NOTZFWbhBig+X9G9eYW/8m0/4OXNx8pxJ6z57x0dw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<script src="https://cdn.tailwindcss.com"></script>
<link href="css/home.css" rel="stylesheet" />
<!-- 🔝 Thanh điều hướng -->
<header class="sticky top-0 z-20 border-b bg-white py-4 shadow-sm">
    <div class="container mx-auto flex justify-between">
        <a class="navbar-brand text-danger fw-bold" href="/">🍰 SweetCake</a>
        <ul class="flex gap-x-3">
            <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/">Trang Chủ</a></li>
            <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/products">Sản Phẩm</a></li>
            <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/cart">Giỏ Hàng</a></li>
            <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/contact">Liên Hệ</a></li>

            @if (isAuthenticated)
            {
                <li class="text-sm text-gray-600">Xin chào, @userEmail</li>
                <li class="text-sm hover:underline hover:text-primary">
                    <button class="nav-link" @onclick="Logout">Đăng xuất</button>
                </li>
            }
            else
            {
                <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/register">Đăng ký</a></li>
                <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/login">Đăng nhập</a></li>
            }
        </ul>
    </div>
</header>

<!-- 🎬 Banner Slideshow -->
<div class="banner overflow-hidden">
    <img class="h-[500px] w-full object-fill object-center" src="images/banner1.png" alt="Bánh Ngon 1">
    <img class="h-[500px] w-full object-fill object-center" src="images/banner2.jpg" alt="Bánh Ngon 2">
    <img class="h-[500px] w-full object-fill object-center" src="images/banner3.jpg" alt="Bánh Ngon 3">
</div>
@* Products *@
<div>
    <div class="container mx-auto py-12">
        <!-- 🔍 Thanh tìm kiếm -->
        <div class="mb-6 text-center">
            <input type="text" @bind="searchQuery" @bind:event="oninput" class="form-control d-inline-block w-50" placeholder="Tìm kiếm bánh ngọt...">
            <button class="btn btn-primary ms-2 text-white" @onclick="SearchProducts">🔍 Tìm kiếm</button>
        </div>


        <h3 class="mb-6 text-center text-lg font-semibold">🎂 Sản Phẩm Nổi Bật</h3>

        @if (products == null)
        {
            <p class="text-muted text-center">Đang tải sản phẩm...</p>
        }
        else if (!products.Any())
        {
            <p class="text-warning text-center">Không tìm thấy sản phẩm nào.</p>
        }
        else
        {
            <div class="grid grid-cols-4 items-center justify-center gap-6">
                @foreach (var product in products)
                {
                    <div class="overflow-hidden rounded-lg shadow-md">
                        <img src="@product.ImagePath" class="h-[196px] w-full object-cover object-center" alt="@product.Name" style="">
                        <div class="p-4">
                            <h5 class="mb-1 font-semibold">@product.Name</h5>
                            <p class="mb-1">@product.Description</p>
                            <h6 class="text-lg font-bold text-[#dc3545]">@product.Price.ToString("N0") VNĐ</h6>
                            <button class="mt-3 w-full rounded-full bg-[#dc3545] py-2 text-white">🛒Thêm vào giỏ</button>
                        </div>
                    </div>
                }
            </div>
        }

    </div>

</div>


<!-- 📢 Phần giới thiệu -->
<div class="bg-[#f8f9fa] py-12">
    <div class="container mx-auto text-center">
        <h3 class="mb-6 text-center text-lg font-semibold">🍰 Giới Thiệu SweetCake</h3>
        <p class="text-muted">SweetCake - cửa hàng bánh ngọt hàng đầu với nguyên liệu tự nhiên và hương vị thơm ngon.</p>
    </div>
</div>

<!-- 📌 Chân trang -->
<footer class="bg-dark p-12 text-center text-white">
    <p>© 2025 SweetCake. All Rights Reserved.</p>
</footer>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js" integrity="sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.min.js" integrity="sha512-HGOnQO9+SP1V92SrtZfjqxxtLmVzqZpjFFekvzZVWoiASSQgSr4cw9Kqd2+l8Llp4Gm0G8GIFJ4ddwZilcdb8A==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script>
    $('.banner').slick({
        slidesToShow: 1,
        slidesToScroll: 1,
        autoplay: true,
        autoplaySpeed: 2000,
    });

</script>


@code {
    private List<Products>? products;
    private string searchQuery = "";
    private bool isAuthenticated = false;
    private string userEmail = "";
    protected override async Task OnInitializedAsync()
    {
        // Tải dữ liệu sản phẩm và danh mục
        products = await _context.Products.ToListAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadAuthState();
            StateHasChanged();
        }
    }

    private async Task LoadAuthState()
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            var email = await LocalStorage.GetItemAsync<string>("userEmail");
            Console.WriteLine($"Checking LocalStorage - Token: {token}, Email: {email}");

            if (!string.IsNullOrEmpty(token) && !string.IsNullOrEmpty(email))
            {
                isAuthenticated = true;
                userEmail = email;
                Console.WriteLine($"Authenticated: {isAuthenticated}, Email: {userEmail}");
            }
            else
            {
                isAuthenticated = false;
                userEmail = "";
                Console.WriteLine("Not authenticated - Token or Email missing");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading auth state: {ex.Message}");
        }
    }

    private void SearchProducts()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            products = _context.Products.ToList();
        }
        else
        {
            products = _context.Products
                .Where(p => p.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private void FilterByCategory(int? categoryId)
    {
        if (categoryId == null)
        {
            products = _context.Products.ToList();
        }
        else
        {
            products = _context.Products.Where(p => p.CategoryId == categoryId).ToList();
        }
    }

    private async Task Logout()
    {
        Console.WriteLine("Logout triggered");
        try
        {
            await LocalStorage.RemoveItemAsync("authToken");
            await LocalStorage.RemoveItemAsync("userEmail");
            Console.WriteLine("LocalStorage cleared");

            isAuthenticated = false;
            userEmail = "";
            StateHasChanged();
            Console.WriteLine("State reset, navigating to home");

            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout error: {ex.Message}");
        }
    }
}